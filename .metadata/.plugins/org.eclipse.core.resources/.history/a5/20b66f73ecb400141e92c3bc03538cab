package com.ds.tree;

public class PerimeterTree {
	
	Tree tree;
	Queue<Node> queue;
	
	public PerimeterTree() {
		
		tree = new Tree();
		
		/*tree.addNode(20, tree.getRoot());
		tree.addNode(8, tree.getRoot());
		tree.addNode(22, tree.getRoot());
		tree.addNode(25, tree.getRoot());
		tree.addNode(4, tree.getRoot());
		tree.addNode(12, tree.getRoot());
		tree.addNode(10, tree.getRoot());
		tree.addNode(14, tree.getRoot());*/
		tree.addNode(50, tree.getRoot());
		tree.addNode(45, tree.getRoot());
		tree.addNode(65, tree.getRoot());
		tree.addNode(99, tree.getRoot());
		tree.addNode(52, tree.getRoot());
		tree.addNode(58, tree.getRoot());
		tree.addNode(31, tree.getRoot());
		tree.addNode(47, tree.getRoot());
		tree.addNode(42, tree.getRoot());
	}
	
	public void perimeterNodes(){
		
		Node previous = null;
		boolean dummyFlag = false;
		
		Queue<Node> down = new Queue<Node>(20);
		Queue<Node> up = new Queue<Node>(20); 
		
		Node dummy = new Node();
		dummy.setValue(-1);
		
		queue = new Queue<Node>(20);
		queue.enqueue(dummy);
		queue.enqueue(tree.getRoot());
		
		while(queue.isEmpty()){
			
			Node current = queue.dequeue();
			if(current.getValue() < 0 && dummyFlag == false){
				
				up.enqueue(previous);
				dummyFlag = true;
				queue.enqueue(dummy);
			}
			
			if(dummyFlag == true){
				
				down.enqueue(current);
				dummyFlag = false;
			}
			
			
		}
		
	}
	

}
